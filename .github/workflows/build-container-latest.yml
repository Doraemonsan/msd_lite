name: build

on: [push, pull_request]

env:
  BUILD_TYPE: Release
  PROJECT_ROOT: ${{ github.workspace }}
  BINARY_PATH: src/msd_lite
  CONFIG_PATH: conf/msd_lite.conf
  ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
  RELEASE_NAME: msd_lite

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc]
        include:
          - compiler: gcc
            cc: gcc
            cxx: g++

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install libraries
      run: |
        sudo apt-get update
        sudo apt-get install cmake libcunit1 libcunit1-doc libcunit1-dev

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_TESTS=1

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE -j 16

    # 打包二进制文件和配置文件
    - name: Package Artifacts
      shell: bash
      run: |
        # 创建 artifacts 目录
        mkdir -p ${{ env.ARTIFACTS_DIR }}

        # 复制二进制文件和配置文件到 artifacts 目录
        cp ${{ env.BINARY_PATH }} ${{ env.ARTIFACTS_DIR }}
        cp ${{ env.CONFIG_PATH }} ${{ env.ARTIFACTS_DIR }}

        # 打包成 zip 文件
        cd ${{ env.ARTIFACTS_DIR }}
        tar -czf msd_lite_amd64.tar.gz ${{ env.ARTIFACTS_DIR }}/*

    # 构建 Docker 镜像
    - name: Build Docker Image
      run: |
        # 准备 Dockerfile
        cat <<EOF > Dockerfile
        FROM ubuntu:latest
        
        RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates

        # 将二进制文件复制到 /usr/local/bin
        COPY artifacts/msd_lite /usr/local/bin/
        
        # 将配置文件复制到 /etc
        COPY artifacts/msd_lite.conf /etc/
        
        # 设置容器启动命令
        CMD ["/usr/local/bin/msd_lite", "-v", "-c", "/etc/msd_lite.conf"]
        EOF

        # 构建镜像
        docker build -t ${{ env.RELEASE_NAME }} .

        # 保存镜像为 tar 文件
        docker save -o msd_lite_container_amd64.tar ${{ env.RELEASE_NAME }}

    - name: 创建 Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.1.11.0
        release_name: Release v1.11.0
        body: |
            自动构建包，仅AMD64
            draft: false
            prerelease: false

    - name: 上传二进制文件
      id: upload-binary-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: msd_lite_amd64.tar.gz
        asset_name: msd_lite_amd64.tar.gz
        asset_content_type: application/tar

    - name: 上传Container包
      id: upload-container-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: msd_lite_container_amd64.tar
        asset_name: msd_lite_container_amd64.tar
        asset_content_type: application/zip
    